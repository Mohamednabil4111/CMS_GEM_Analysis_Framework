
**************************************************
*                                                *
*	CHANGELOG: CMS_GEM_Analysis_Framework        *
*	VERSION: 1.0.10                              *
*	LAST UPDATE: May 18 2016                     *
*                                                *
**************************************************

Update: May 18th 2016
==================================================
->Fixed a bug where the copy ctor and assignment operators of Uniformity::DetectorMPGD were not correctly setting the strDetName and strDetNameNoSpecChar data members
->Updated config/configRun_Template_Series.cfg and scripts/runMode_Series.sh to take a detector name as user input
->Changed Uniformity::AnalyzeResponseUniformity::vec_strSupportedKeywords to also include "FWHM" and "HWHM"
->Changing Uniformity::AnalyzeResponseUniformity::getValByKeyword() to try provide an initial fit guess for the (HWHM) FWHM based on (1/2) the rms of the input histogram
->Changing Uniformity::AnalyzeResponseUniformity::getPeakPos() and getPeakPosError() to getParam() and getParamError() for any input string to be compared with AnalyzeResponseUniformity::vec_strSupportedKeywords
->Adding method Uniformity::AnalyzerResponseUniformityClusters::initGraphsClusters() for initializing TGraph objects (and inherited objects) used in the cluster analysis
->Uniformity::InterfaceAnalysis now calls AnalyzerResponseUniformityClusters::initGraphsClusters()
->Added shared_ptr<TGraphErrors> data member Uniformity::SectorEta::gEta_ClustADC_Fit_PkRes for storing peak resolution
->The Peak resolution (PkWidth / PkPos) is now calculated by Uniformity::AnalyzerResponseUniformityClusters::fitHistos()
->Uniformity::VisualizeUniformity::getObsGraph now supports getting Uniformity::SectorEta::gEta_ClustADC_Fit_PkRes
->Summary TCanvas objects are now prepared in Uniformity::InterfaceAnalysis::storeResults()

Update: May 17th 2016
==================================================
->Disabled Uniformity::VisualizeUniformity::storeCanvasHisto2D() for now, doesn't seem to draw the detector properly
->Run config file now asks the user for which detector they are processing.  The detector name is now included in the TName's of all TCanvas objects in the output TFile.
->Added data member for storing detector name in Uniformity::RunSetup called strDetName
->Added data members and methods to Uniformity::DetectorMPGD for detector name (DetectorMPGD::strDetName), getting the name ( DetectorMPGD::getName(), DetectorMPGF::getNameNoSpecial() ), and setting the name ( DetectorMPGD::setName() )
->Added method AnalyzeResponseUniformity::getHistogram2D(), now 2D histograms that plot 1D observables defined by the user will follow user input for parameters (e.g. binning, names, etc...);
->Fixed a bug where the number of bins in the cluster position histogram (or axis representing this in 2D histograms) was not following the requested granularity of the user
->Fixed a bug where Uniformity::DetectorMPGD::strDetName and strDetNameNoSpecChar were not copied on assignment

Update: May 13th 2016
==================================================
->Added method Uniformity::VisualizeUniformity::storeCanvasGraph2D() for making 2D plots from TGraph's of each SectorEta in DetectorMPGD
->Uniformity::InterfaceAnalysis::storeResults() now calls VisualizeUniformity::storeCanvasGraph2D()
->Added method Uniformity::VisualizeUniformity::storeCanvasHisto2D() for making 2D plots from TGraph's of each SectorEta in DetectorMPGD

Update: May 10th 2016
==================================================
->Added a template run config file for running in "series mode" found in: config/configRun_Template_Series.cfg
->Added a script to automatically configure a "series mode" run using the above template file for a list of input files found in a given directory, script found in scripts/runMode_Series.sh
->Updated the mapping configuration file to the reflect the updated, and hopefully correct, APV-to-FEC mapping: config/GE7MappingCMScernData2016_v2.cfg 

Update: May 6th 2016
==================================================
->Added new data member to Uniformity::HistosPhysObj called std::shared_ptr<TH2F> hADC_v_Size; also added to list of objects which undergo a deep copy.
->Uniformity::AnalyzeResponseUniformityClusters::fillHistos now filles HistosPhysObj.hADC_v_Size for clusters at both SectorEta and SectorPhi level
->Uniformity::AnalyzeResponseUniformityClusters::loadHistosFromFile now filles HistosPhysObj.hADC_v_Size for clusters at both SectorEta and SectorPhi level
->Uniformity::AnalyzeResponseUniformityClusters::storeFits( string & strOutputROOTFileName, ... ) now just calls AnalyzeResponseUniformityClusters::storeFits( TFile * file_InputRootFile) instead of duplicating the method
->Uniformity::AnalyzeResponseUniformityClusters::storeHistos( string & strOutputROOTFileName, ... ) now just calls AnalyzeResponseUniformityClusters::storeHistos( TFile * file_InputRootFile) instead of duplicating the method
->Uniformity::AnalyzeResponseUniformityHits::storeHistos( string & strOutputROOTFileName, ... ) now just calls AnalyzeResponseUniformityClusters::storeHistos( TFile * file_InputRootFile) instead of duplicating the method
->Uniformity::SelectorCluster::setClusters(std::string &strInputRootFileName, ... ) now just calls SelectorCluster::setClusters(TFile * file_InputRootFile, ... ) instead of duplicating the method
->Uniformity::SelectorHit::setHits(std::string &strInputRootFileName, ... ) now just calls SelectorHit::setHits(TFile * file_InputRootFile, ... ) instead of duplicating the method
->Uniformity::VisualizeUniformity::storeCanvasGraph(std::string & strOutputROOTFileName, ... ) now just calls VisualizeUniformity::storeCanvasGraph(TFile * file_InputRootFile, ... ) instead of duplicating the method
->Uniformity::VisualizeUniformity::storeCanvasHisto(std::string & strOutputROOTFileName, ... ) now just calls VisualizeUniformity::storeCanvasHisto(TFile * file_InputRootFile, ... ) instead of duplicating the method
->Uniformity::VisualizeUniformity::storeCanvasHistoSegmented(std::string & strOutputROOTFileName, ... ) now just calls VisualizeUniformity::storeCanvasHistoSegmented(TFile * file_InputRootFile, ... ) instead of duplicating the method

Update: May 5th 2016
==================================================
->Updated README.txt file to reflect changes
->Merged feature_UpdatedExec into develop

Update: May 4th 2016
==================================================
->Uniformity::InterfaceAnalysis methods for running analysis on TFile's created by amoreSRS have been implemented
->Uniformity::InterfaceAnalysis methods for running analysis on TFile's created by CMS_GEM_Analysis_Framework have been implemented
->AnalyzeResponseUniformityClusters::loadHistosFromFile() has been overloaded to either take a std::string (storing the physical filename) or an open TFile * object
->Updating src/analyzeUniformity.cpp to use InterfaceAnalysis and ParameterLoaderRun
->RunSetup struct now has a flag for if the struct was set correctly
->ParameterLoaderRun::getRunParameters now takes an input std::ifstream instead of a std::string
->Updated Makefile.clang and Makefile.gpp to compile InterfaceAnalysis and ParameterLoaderRun
->AnalyzeResponseUniformityClusters::loadHistosFromFile() methods have been updated to load all histograms, not just those involved in fitting
->Corrected an improper naming convention in AnalyzeResponseUniformityClusters, rare instances of "hiEta" changed to "h_iEta" in TH1 & TH2 TName fields.
->May the force by with you.

Update: May 3rd 2016
==================================================
->HitSelector::setHits() has been overloaded to either take a std::string (storing the physical filename) or an open TFile * object
->ClusterSelector::setClusters() has been overloaded to either take a std::string (storing the physical filename) or an open TFile * object
->AnalyzeResponseUniformityHits::storeHistos() has been overloaded to either take a std::string (storing the physical filename) or an open TFile * object
->AnalyzeResponseUniformityClusters::storeHistos() has been overloaded to either take a std::string (storing the physical filename) or an open TFile * object
->AnalyzeResponseUniformityClusters::storeFits() has been overloaded to either take a std::string (storing the physical filename) or an open TFile * object
->VisualizeUniformity::storeCanvasGraph() has been overloaded to either take a std::string (storing the physical filename) or an open TFile * object
->VisualizeUniformity::storeCanvasHisto() has been overloaded to either take a std::string (storing the physical filename) or an open TFile * object
->VisualizeUniformity::storeCanvasHistoSegmented() has been overloaded to either take a std::string (storing the physical filename) or an open TFile * object
->VisualizeUniformity has three new sets of overloaded methods called storeListOfCanvasesGraph, storeListOfCanvasesHisto, and storeListOfCanvasesHistoSegmented which either take a std::string (storing the physical filename) or an open TFile * object and a map<string,string> of observable (key) and draw option (value) to make the summary plots for
->VisualizeUniformity::storeCanvasHisto(std::string & strOutputROOTFileName, std::string strOption, std::vector<std::string> vec_strObsName, std::string strDrawOption, bool bShowPhiSegmentation) is depreciated, instead use VisualizeUniformity::storeListOfCanvasesHisto( ... )

->Added new class Uniformity::ParameterLoaderRun for loading the RunSetup struct and determining the input file list
->Moved the RunSetup struct from src/analyzeUniformity.cpp to include/UniformityUtilityTypes.h

->Added new class Uniformity::InterfaceAnalysis for being the single access point for the analysis

Update: Apr 30th 2016
==================================================
->DetectorMPGD has three new methods resetClusters, resetHits, and resetPhysObj
->DetectorMPGD::resetClusters clears all stored clusters, but leaves all other data members (e.g. geometry, histograms, etc...) intact
->DetectorMPGD::resetHits clears all stored hits, but leaves all other data members (e.g. geometry, histograms, etc...) intact
->DetectorMPGD::resetPhysObj clears all stored clusters and hits, but leaves all other data members (e.g. geometry, histograms, etc...) intact
->AnalyzeUniformityClusters has new method initHistosClusters
->This method will initialize all histograms once, before looping through input clusters
->Changed the way the slice histograms in AnalyzeUniformityClusters were made, now they will properly reflcet the aggregate of a multi run analysis (instead of being overwritten for each new run);
->AnalyzeUniformityHits has new method initHistosHits
->This method will initialize all histograms once, before looping through input hits
->Fixed a bug in AnalyzeUniformityHits where the number of bins of hit position histogram did not equal the number of strips
->Reduced message spam to terminal from all classes
->Uniformity::Cluster now has a placeholder data member map_hits to represent the hits used to reconstruct this cluster.  Placeholder for now; will be null.

Update: Apr 29th 2016
==================================================
->New configuration file template exists referred to as the Run Config: config/configRun.cfg
->analyzeUniformity Executable now takes a two argumenta, the run config file to be used and a true/false verbose mode flag
->analyzeUniformity can now read in multiple input files

Update: Apr 27th 2016
==================================================
->Updating README file
->Merging a first version of feature_VisualizeUniformity into the develop branch

Update: Apr 26th 2016
==================================================
->Fixed crash where invalid histogram pointer in Uniformity::VisualizeUniformity was causing a seg fault, need to use Uniformity::AnalyzeResponseUniformity::getDetector() in executable
->Added copy constructor and assignment operator to Uniformity::DetectorMPGD
->Implemented method for Uniformity::VisualizeUniformity in which a TCanvas is drawn with a physics observable drawn on a unique pad for each SectorEta
->Implemented method for Uniformity::VisualizeUniformity in which a TCanvas is drawn with all physics observables drawn on the same for each SectorEta

Update: Apr 25th 2016
==================================================
->Added copy constructor and assignment operator to Uniformity::HistosPhysObj
->Added copy constructor and assignment operator to Uniformity::SummaryStatistics
->Added copy constructor and assignment operator to Uniformity::SectorSlice
->Added copy constructor and assignment operator to Uniformity::SectorPhi
->Added copy constructor and assignment operator to Uniformity::SectorEta

Update: Apr 24th 2016
==================================================
->Added new class Uniformity::VisualizeUniformity which inherits from Uniformity::AnalyzeResponseUniformity
->Class Uniformity::VisualizeUniformity makes a TCanvas for an input observable, the TCanvas has one pad for each SectorEta, the observable is drawn on the TCanvas

Update: Apr 22th 2016
==================================================
->Removing AnalysisCode.cpp, AnalysisCodeGE6_V1_fast_cl.cpp, AnalysisCodeGE6_V2.cpp, AnalysisCode_GE4_V1.cpp, and AnalysisCode_GE6_V1.cpp from repo
->Removing Makefile_SingleSpecAna.clang and Makefile_SingleSpecAna.gpp from repo
->Removing src/SingleSpectrumAnalyzer.cpp from repo
->AnalyzeResponseUniformityClusters will now store a "Summary" set of of histograms (sum of all SectorEta) when AnalyzeResponseUniformityClusters::StoreHistos is called
->AnalyzeResponseUniformityHits will now store a "Summary" set of of histograms (sum of all SectorEta) when AnalyzeResponseUniformityHits::StoreHistos is called

Update: Apr 11th 2016
==================================================
->Adding functionality for "hitADC" histogram to be created in the analysis
->Implemented vector for storing hit ADC values in Uniformity::Hit (e.g. Uniformity::Hit::vec_fADC )
->Implemented cut for saturated hit ADC values in Uniformity::SelParam (e.g. Uniformity::SelParam::iCut_ADCSat)
->Uniformity::ParameterLoaderAnalysis will now take a user input for the minimum ADC value for hits and the maximum ADC value for hits
->Uniformity::ParameterLoaderAnalysis will now check to see if the cut on the min hit time is >= 0; if not it will be reset to 0
->Uniformity::ParameterLoaderAnalysis will now check to see if the cut on the max hit time is <= 29; if not it will be reset to 29
->Uniformity::SelectorHit will now load and cut on hit ADC values

Update: Mar 15th 2016
==================================================
->Changing name of Uniformity::ClusterSelector to Uniformity::SelectorCluster
->Changing name of Uniformity::HitSelector to Uniformity::SelectorHit

Update: Mar 14th 2016
==================================================
->Re-naming the SelParamClusters struct in include/UniformityUtilityTypes.h to SelParam
->SelParam struct is now used for both Cluster and Hit selection

->Added in Uniformity::SectorPhi two data members to track minimum and maximum strip number

->Adding functionality to set Hit Selection criteria in Uniformity::ParameterLoaderAnalysis

->Renaming Uniformity::AnalyzeResponseUniformity to Uniformity::AnalyzeResponseUniformityClusters
->Adding new generic analysis class called Uniformity::AnalyzeResponseUniformity
->Uniformity::AnalyzeResponseUniformityClusters now inherits from Uniformity::AnalyzeResponseUniformity
->Adding new class Uniformity::AnalyzeResponseUniformityHits which inherits from Uniformity::AnalyzeResponseUniformity
->Making Uniformity::AnalyzeResponseUniformityClusters and Uniformity::AnalyzeResponseUniformityHits both friend classes of Uniformity::DetectorMPGD
->For now base analyzer class Uniformity::AnalyzeResponseUniformity is also a friend class of Uniformity::DetectorMPGD (maybe not needed...)

->Changes to Makefile.clang and Makefile.gpp to compile correctly the new classes.

->Renamed struct ClusterHistos to HistosPhysObj in include/UniformityUtilityTypes.h

Update: Mar 11th 2016
==================================================
->Adding support for a hit based analysis in addition to the cluster analysis
->Adding struct in include/UniformityUtilityTypes.h called "Hit"
->Adding a vector<Hit> object to struct SectorPhi

->Adding new generic Selector class called "Selector"
->Now ClusterSelector inherits from Selector
->Adding new class HitSelector which inherits from Selector
->We have moved setAnalysisParameters from ClusterSelector to Selector; also aSetupUniformity is now a protected data member of Selector (instead of private member of ClusterSelector)

->Added functionality to get and set Uniformity::Hit in Uniformity::DetectorMPGD; implementation follows what is done for Uniformity::Cluster

Update: Feb 23rd 2016
==================================================
->Created struct SummaryStatistics in include/UniformityUtilityTypes.h
->SummaryStatistics contains statistical variables
->An instance of SummaryStatistics has been added to SectorEta to track ADC Peak Position (from both fit & spectrum)

->Created struct ClusterHistos in include/UniformityUtilityTypes.h
->ClusterHistos now include an instance of the cluster histograms that were defined in SectorEta & SectorPhi
->An instance of ClusterHistos has been created in SectorEta & SectorPhi, increases functionality for expanding histo list

->Added to SectorEta two new std::multiset<float> objects (mset_fClustADC_Fit_PkPos, mset_fClustADC_Spec_PkPos) for tracking the results from the fit & TSpectrum
->These two new multisets are used in AnalyzeResponseUniformity::calcStatistics method

->Added AnalyzeResponseUniformity::calcStatistics method; sets the values of the SummaryStatistics container in SectorEta

Update: Feb 17th 2016
==================================================
->Changed DetectorMPGD and ParameterLoaderAmoreSRS
->Now the number of SectorPhi's per SectorEta is no longer hardcoded
->Instead the value of the "nbConnect" column in the AMORE mapping config file is used

Update: Feb 16th 2016
==================================================
->New feature, adding functionality to AnalyzResponseUniformity
->AnalyzeResponseUniformity will now be able to load previously created distributions and fit them
->See AnalyzeResponseUniformity::loadHistosFromFile()

Update: Feb 15th 2016
==================================================
->First stable release to the repository
->develop branch to be merged into the master branch
->Implementation of all fundamental classes completed
->Outstanding class includes only VisualizeUniformity
->Able to reproduce results of S. Colafranceschi from FIT
->Able to analyze detector data taken here at CERN

Update: Jan 26th 2016
==================================================
->Initial commit of repository
